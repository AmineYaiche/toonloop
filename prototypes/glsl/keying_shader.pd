#N canvas 465 48 979 671 10;
#X obj 10 460 cnv 15 400 60 empty empty empty 20 12 0 14 -258113 -66577
0;
#X obj 55 178 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X text 85 147 Description: Renders a GLSL shader.;
#X text 81 174 <---- 1 Create Gem window;
#X text 463 301 <--- 3 Play with the parameters;
#X text 457 227 You can get the (uniform) parameters of the GLSL shaders
by sending "print" to the second inlet. Then \, send messages with
those selectors to the third inlet. The type is usually either a float
\, or a vector (two or three floats).;
#X text 53 16 A GLSL shader program is made of two distinct shaders
: the vertex shader \, which might change the position and other attributes
of the vertices \, and the fragment shaders \, which might modify the
pixels on the texture. They override the normal flow of rendering chain
on the GPU. They are compiled and uploaded on the GPU (graphic card)
\, which means that they don't consume CPU time in their calculations.
You can edit your own shaders \, as they are just text files on your
hard drive.;
#X obj 456 97 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X text 478 93 <---- 2 Load vertex and fragment;
#X msg 97 350 device 0;
#N canvas 162 133 574 424 serin 0;
#X obj 205 60 cnv 20 20 20 empty \$0-open-canvas 0 4 10 0 16 -233017
-1 0;
#X obj 60 61 hradio 18 1 1 8 empty empty empty 0 -6 0 8 -225271 -1
-1 0;
#X obj 60 13 inlet;
#X msg 200 202 label \$1;
#X obj 200 180 makefilename %d;
#X obj 59 108 int;
#X obj 59 337 outlet;
#X msg 201 306 set \$1 \$2;
#X obj 59 266 trigger bang anything;
#X obj 201 286 list;
#X obj 200 225 send \$0-open-canvas;
#X msg 60 210 device \$1;
#X connect 1 0 5 0;
#X connect 2 0 1 0;
#X connect 3 0 10 0;
#X connect 4 0 3 0;
#X connect 5 0 4 0;
#X connect 5 0 11 0;
#X connect 7 0 6 0;
#X connect 8 0 6 0;
#X connect 8 1 9 0;
#X connect 9 0 7 0;
#X connect 11 0 8 0;
#X coords 0 -1 1 1 165 20 1 60 60;
#X restore 97 326 pd serin;
#X obj 31 543 colorRGB 1 1 1 1;
#X obj 41 405 pix_rgba;
#X obj 17 274 alpha 1;
#X obj 41 426 pix_texture;
#X msg 457 205 fragment openpanel;
#X msg 457 170 print;
#X text 587 203 <-- Open fragment or vertex file...;
#X text 86 217 Argument: @fragment Shader for the pixels;
#X text 86 233 Argument: @vertex Shader for the vertices;
#X msg 324 563 ------------;
#X obj 325 587 print ---------;
#X obj 88 374 pix_video;
#X floatatom 413 346 5 0 0 0 - - -;
#X text 416 560 Clear console;
#X text 89 252 Flags: @rguments;
#X text 507 170 <-- Print info on the attributes the shaders accept
;
#X msg 458 129 fragment keying.frag.glsl \, vertex keying.vert.glsl
;
#X obj 43 476 gems.glsl.shader @fragment keying.frag.glsl @vertex keying.vert.glsl
;
#X text 428 529 <-- you need PdMtlAbstractinons for Pure Data to use
this;
#X obj 55 198 gems.win 320 240;
#X obj 30 565 rectangle 5.33333 4;
#X obj 177 532 gemhead 50;
#X obj 17 250 gemhead 100;
#X obj 178 586 rectangle 5.33333 4;
#X obj 177 559 colorRGB 0 1 0 1;
#X obj 18 297 gems.alpha.mode 6 7;
#X obj 428 382 list.pak.3 0 1 0;
#X floatatom 460 346 5 0 0 0 - - -;
#X floatatom 506 347 5 0 0 0 - - -;
#X obj 607 317 input.color.grid_;
#X obj 445 434 flow.prepend set;
#X msg 444 457 keying_color 1 1 1;
#X obj 428 407 flow.prepend keying_color;
#X floatatom 601 425 5 0 0 0 - - -;
#X obj 616 461 list.pak.3 0 1 0;
#X floatatom 648 425 5 0 0 0 - - -;
#X floatatom 694 426 5 0 0 0 - - -;
#X obj 616 486 flow.prepend thresh;
#X floatatom 820 396 5 0 0 0 - - -;
#X msg 821 349 0.5;
#X connect 1 0 30 0;
#X connect 7 0 27 0;
#X connect 9 0 22 0;
#X connect 10 0 9 0;
#X connect 11 0 31 0;
#X connect 12 0 14 0;
#X connect 13 0 36 0;
#X connect 14 0 28 0;
#X connect 15 0 28 1;
#X connect 16 0 28 1;
#X connect 20 0 21 0;
#X connect 22 0 12 0;
#X connect 23 0 37 0;
#X connect 27 0 28 1;
#X connect 28 0 11 0;
#X connect 32 0 35 0;
#X connect 33 0 13 0;
#X connect 35 0 34 0;
#X connect 36 0 22 0;
#X connect 37 0 43 0;
#X connect 38 0 37 1;
#X connect 39 0 37 2;
#X connect 40 0 43 0;
#X connect 41 0 42 0;
#X connect 43 0 28 2;
#X connect 43 0 41 0;
#X connect 44 0 45 0;
#X connect 45 0 48 0;
#X connect 46 0 45 1;
#X connect 47 0 45 2;
#X connect 48 0 28 2;
#X connect 49 0 47 0;
#X connect 49 0 46 0;
#X connect 49 0 44 0;
#X connect 50 0 49 0;

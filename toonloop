#!/usr/bin/env python
#
# ToonLoop for Python
#
# Copyright 2008 Alexandre Quessy & Tristan Matthews
# <alexandre@quessy.net> & <le.businessman@gmail.com>
# http://www.toonloop.com
#
# Original idea by Alexandre Quessy
# http://alexandre.quessy.net
#
# ToonLoop is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ToonLoop is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the gnu general public license
# along with ToonLoop.  If not, see <http://www.gnu.org/licenses/>.
#

"""
ToonLoop is a realtime stop motion performance tool. 

The idea is to spread its use for teaching new medias to children and to 
give a professional tool for movie creators.

In the left window, you can see what is seen by the live camera.
In the right window, it is the result of the stop motion loop.

Usage :
 - Press the SPACE bar to grab a frame.
 - Press DELETE or BACKSPACE to delete the last frame.
 - Press 'r' to reset and start the current sequence. (an remove all its frames)
 - Press 's' to save the current sequence as a QuickTime movie.
 - Press 'i' to print current loop frame number, number of frames in loop 
   and global framerate.
 - Press 'h' to print a help message.
 - Press UP to increase frame rate.
 - Press DOWN to decrease frame rate.
 - Press 'a' to toggle on/off the auto recording. 
   (it records one frame on every frame) It is an intervalometer.
   Best used to create timelapse sequences automatically.
 - Press 'k' or 'j' to increase or decrease the auto rate.

INSTALLATION NOTES : 
The camera module for pygame is available from pygame's svn revision 
1744 or greater
svn co svn://seul.org/svn/pygame/trunk
"""
 
__version__ = "1.0 beta"

import sys
from optparse import OptionParser

import pygame 
from twisted.internet import reactor

from rats import render

# the core: 
from toon.itoonloop import ToonLoopError
from toon.itoonloop import ToonLoop
from toon.itoonloop import Configuration

if __name__ == "__main__":
    """
    Starts the application, reading the command-line arguments.
    """
        # self.intervalometer_on = False
        # self.intervalometer_enabled = False
        # self.intervalometer_rate_seconds = 30.0 # in seconds
    parser = OptionParser(usage="%prog" + __version__ , version=str(__version__))
    # + " \n\n"  __doc__
    parser.add_option("-d", "--device", dest="device", type="int", \
        help="Specifies v4l2 device to grab image from.", default=0)
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", \
        help="Sets the output to verbose.")
    parser.add_option("-o", "--option", action="append", nargs=2, \
        help="Sets any toonloop option by name.")
    parser.add_option("-l", "--list-options", \
        dest="list_options", action="store_true", \
        help="Prints the list of options and exit.") 
    parser.add_option("-f", "--fps", type="int", \
        help="Sets the rendering frame rate.", default=30)
    parser.add_option("-t", "--intervalometer-rate-seconds", type="float",  \
        help="Sets intervalometer interval in seconds.", default=30.0)
    parser.add_option("-H", "--toonloop-home", type="string",  \
        help="Path to saved files.")
    parser.add_option("-i", "--intervalometer-on", \
        dest="intervalometer_on", action="store_true", \
        help="Starts the intervalometer at startup.") # default=False
    parser.add_option("-e", "--intervalometer-enabled", \
        dest="intervalometer_enabled", action="store_true", \
        help="Enables/disables the use of the intervalometer.", default=True)
    parser.add_option("-w", "--image-width", type="int", \
        help="Width of the images grabbed from the camera.")
    (options, args) = parser.parse_args()
    
    print "ToonLoop - Version " + str(__version__)
    print "Copyright 2008 Alexandre Quessy & Tristan Matthews"
    print "Released under the GNU General Public License"
    print "Using video device %d" % options.device
    print "Press h for usage and instructions"
    pygame.init()
    config = Configuration()
    kwargs = config.__dict__
    if options.list_options:
        print """
Use ToonLoop options with -o flag :
    toonloop -o [name] [value]
        """
        print "ToonLoop options and their default values : \n"
        for k, v in kwargs.items():
            print "    -o %s %s" % (k, v)
        print "\nExiting."
        sys.exit(0)
    if options.toonloop_home:
        kwargs['toonloop_home'] = options.toonloop_home
    if options.image_width:
        kwargs['image_width'] = options.image_width
        kwargs['image_height'] = options.image_width * 3 / 4
        
    # options that have default values:
    kwargs['video_device'] = options.device
    kwargs['intervalometer_rate_seconds'] = options.intervalometer_rate_seconds
    kwargs['intervalometer_on'] = options.intervalometer_on == True
    kwargs['intervalometer_enabled'] = options.intervalometer_enabled
    kwargs['verbose'] = options.verbose == True

    if kwargs['verbose']:
        print "Started in verbose mode."
    if options.option:
        print 'options', options.option
        for k, v in options.option:
            kind = config.set(k, v)
            # not catching exception
            print "OPTION \"%s\" : %s       %s" % (k, v, kind)
    try:
        toonloop = ToonLoop(config)
        if options.verbose:
            toonloop.api.print_help()
    except ToonLoopError, e:
        print str(e.message)
        print "Exiting toonloop with error"
        sys.exit(1)
    else:
        print "Congratulations ! ToonLoop started gracefully."
    pygame_timer = render.Renderer(toonloop, False) # not verbose !  options.verbose
    pygame_timer.desired_fps = options.fps
    try:
        reactor.run()
    except KeyboardInterrupt:
        pass
    print "Exiting toonloop"
    sys.exit(0)


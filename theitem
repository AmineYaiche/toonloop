#!/usr/bin/env python
#
# The Item
#
# Copyright 2009 Alexandre Quessy
# http://www.toonloop.com
#
# ToonLoop is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ToonLoop is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the gnu general public license
# along with ToonLoop.  If not, see <http://www.gnu.org/licenses/>.
#
"""
The Item prototype
"""
import os
import pygame
from pygame.locals import *
from OpenGL.GL import *
import toon
from toon import draw
import sys
from optparse import OptionParser
from twisted.internet import reactor
from pygame import time
from rats import render
from toon.draw import draw_textured_square

def texture_from_image_transparent(texture, image, square_texture=False):
    """
    Copies the pixels from a pygame surface to an OpenGL texture object.
    Transparent PNG version !
    """
    textureData = pygame.image.tostring(image, "RGBA", True) # vertically flipped
    if square_texture:
        glBindTexture(GL_TEXTURE_2D, texture)
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, image.get_width(), image.get_height(), 0, \
                  GL_RGBA, GL_UNSIGNED_BYTE, textureData)
        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
    else:   
        glBindTexture(GL_TEXTURE_RECTANGLE_ARB, texture)
        glTexImage2D(GL_TEXTURE_RECTANGLE_ARB, 0, GL_RGBA, image.get_width(), \
            image.get_height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, textureData)
        glTexParameterf(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexParameterf(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
class TheItem(render.Game):
    """
    The Item Dress-Up Game.
    """
    def __init__(self, image_files):
        self.image_width, self.image_height = 512, 512
        self.paused = False
        self._display_size = (self.image_width, self.image_height)
        self.image_size = (self.image_width, self.image_height)
        self.renderer = None # Renderer instance that owns it.
        self.clock = pygame.time.Clock()
        self.running = True
        #icon = pygame.image.load(os.path.join(self.config.PACKAGE_PATH, 'data', "icon.png"))
        #pygame.display.set_icon(icon) # a 32 x 32 surface
        # the pygame window
        self.display = pygame.display.set_mode(self._display_size, OPENGL | DOUBLEBUF | HWSURFACE)
        pygame.display.set_caption("The Item")
        pygame.mouse.set_visible(True)
        # the images
        self.images = []
        self.textures = [] # list of OpenGL texture objects id
        for i in range(len(image_files)):
            self.images.append(0)
            self.textures.append(0) # list of OpenGL texture objects id
        self._setup_window()
        for i in range(len(image_files)):# transparent PNG
            self.images[i] = pygame.image.load(image_files[i]).convert_alpha()
            texture_from_image_transparent(self.textures[i], self.images[i])

    def process_events(self, events):
        """
        Processes pygame events.
        :param events: got them using pygame.event.get()
        """
        for e in events:
            if e.type == QUIT:
                self.running = False
            # TODO : catch window new size when resized.
            elif e.type == pygame.VIDEORESIZE:
                print "VIDEORESIZE", e
            elif e.type == KEYDOWN: 
                if e.key == K_f: # F Fullscreen
                    pygame.display.toggle_fullscreen()
                # elif e.key == K_i: # I Info
                    # try:
                    #     self.print_stats()
                    # except Exception, e:
                    #     print e.message
                # elif e.key == K_p: # P Pause
                #     self.pause()
                elif e.key == K_ESCAPE: #  or e.key == K_q: # ESCAPE or Q
                    self.running = False # self.quit()
    def draw(self):
        """
        Renders one frame.
        Called from the event loop. (twisted)
        """
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        if not self.paused:
            for i in range(len(self.textures)):
                glColor4f(1.0, 1.0, 1.0, 1.0)
                glPushMatrix()
                glTranslatef(0.0, 0.0, 0.0)
                glScalef(4.0, 3.0, 1.0)
                glBindTexture(GL_TEXTURE_RECTANGLE_ARB, self.textures[i])
                draw_textured_square(self.image_width, self.image_height)
                glPopMatrix()
        self.clock.tick()
        self.fps = self.clock.get_fps()
        pygame.display.flip()

    def _setup_window(self):
        """
        OpenGL setup.
        """
        # create OpenGL texture objects 
        # window is 1280 x 960
        self._resize_window(self._display_size)
        glEnable(GL_TEXTURE_RECTANGLE_ARB) # 2D)
        glEnable(GL_BLEND)
        glShadeModel(GL_SMOOTH)
        glClearColor(0.0, 0.0, 0.0, 0.0) # black background
        glColor4f(1.0, 1.0, 1.0, 1.0)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
        for i in range(len(self.textures)):
            self.textures[i] = glGenTextures(1)

    def _resize_window(self, (width, height)):
        """
        Called when we resize the window.
        (fullscreen on/off)

        The OpenGL coordinates go from -4 to 4 horizontally
        and -3 to 3 vertically.
        (ratio is 4:3)
        """
        print "resize", width, height
        if height == 0:
            height = 1
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-4.0, 4.0, -3.0, 3.0, -1.0, 1.0)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

if __name__ == "__main__":
    prefix = "01_"
    images = [
        prefix + "model.png",
        prefix + "bottom.png",
        prefix + "top.png",
    ] # 3 items list
    path = os.path.dirname(toon.__file__)
    for i in range(len(images)):
        images[i] = os.path.join(path, 'data', images[i])
        print(images[i])
    try:
        app = TheItem(images)
    except:
        raise
    else:
        print "Congratulations ! TheItem started gracefully."
    pygame_timer = render.Renderer(app, False) # not verbose !  options.verbose
    pygame_timer.desired_fps = 24
    try:
        reactor.run()
    except KeyboardInterrupt:
        pass
    print "Exiting"
    sys.exit(0)

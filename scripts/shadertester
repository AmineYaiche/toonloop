#!/usr/bin/env python
"""
Tool to try GLSL shaders with SDL, OpenGL texture and Python.

Example :  PYTHONPATH=$PWD ./scripts/shadertester -d 1 -f simplechroma
"""

__version__ = "0.1"

import sys
import os
import pygame
import pygame.image
import pygame.camera
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.error import GLError
from OpenGL.GLU import *
try:
    from rats.glsl import ShaderProgram
    from rats.glsl import ShaderError
except ImportError, e:
    print(e.message)
    print("path: %s" % (sys.path))
    raise

class VideoCapturePlayer(object):
    size = (640, 480)
    def __init__(self, effect, camera_number=0):
        self.effect = effect
        self.textures = [0] # list of texture ID 

        # create a display surface. standard pygame stuff
        self.screen = pygame.display.set_mode(self.size, OPENGL | DOUBLEBUF | HWSURFACE)
        pygame.display.set_caption("GLSLang Runner")
        self.resize(self.size)
        self.gl_init()
        # gets a list of available cameras.
        self.clist = pygame.camera.list_cameras()
        if not self.clist:
            raise ValueError("Sorry, no cameras detected.")
        if os.uname()[0] == 'Darwin':
            self.isMac = True
            # creates the camera of the specified size and in RGB colorspace
            self.camera = pygame.camera.Camera(camera_number, self.size, 'RGBA')
        else:
            self.isMac = False
            # creates the camera of the specified size and in RGB colorspace
            self.camera = pygame.camera.Camera('/dev/video%d' % (camera_number), self.size, "RGBA")
        # starts the camera
        self.camera.start()
        self.clock = pygame.time.Clock()

        # create a surface to capture to.  for performance purposes, you want the
        # bit depth to be the same as that of the display surface.
        self.snapshot = pygame.surface.Surface(self.size, 0, self.screen)

    def gl_init(self):
        """
        Init the window
        """
        glEnable(GL_TEXTURE_RECTANGLE_ARB) 
        print("Enabled GL_TEXTURE_RECTANGLE_ARB")
        glShadeModel(GL_SMOOTH)
        self.textures[0] = glGenTextures(1)
        glClearColor(0.0, 0.0, 0.0, 0.0)
        glEnable(GL_BLEND)
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
        glColor3f(1., 1., 1.)
        print("will setup effect")
        try:
            self.effect.setup()
        except GLError, e:
            print(str(e)) # should fully format it
            print(e.description)
    
    def resize(self, (width, height)):
        """
        Called when we resize the window.
        (fullscreen on/off)
        """
        if height == 0:
            height = 1
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-4.0, 4.0, -3.0, 3.0, -1.0, 1.0)
        glMatrixMode(GL_MODELVIEW)
    
    def draw(self):
        """
        Called on every frame rendering
        """
        w = 640.0
        h = 480.0
        aspectRatio = w / float(h)

        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        self.effect.pre_draw()
        
        glPushMatrix()
        glBegin(GL_QUADS)
        glTexCoord2f(0.0, 0.0)
        glVertex2f(-4.0, -3.0) # Bottom Left
        glTexCoord2f(w, 0.0)
        glVertex2f(4.0, -3.0) # Bottom Right
        glTexCoord2f(w, h)
        glVertex2f(4.0, 3.0) # Top Right
        glTexCoord2f(0.0, h)
        glVertex2f(-4.0, 3.0) # Top Left
        glEnd()
        glPopMatrix()
        
        self.effect.post_draw()

        glPushMatrix()
        glTranslate(2, 1.5, 0)
        glBegin(GL_QUADS)
        glTexCoord2f(0.0, 0.0)
        glVertex2f(-aspectRatio, -1.) # Bottom Left
        glTexCoord2f(w, 0.0)
        glVertex2f(aspectRatio, -1.) # Bottom Right
        glTexCoord2f(w, h)
        glVertex2f(aspectRatio, 1.) # Top Right
        glTexCoord2f(0.0, h)
        glVertex2f(-aspectRatio, 1.) # Top Left
        glEnd()
        glPopMatrix()
    
    def get_and_flip(self):
        """
        Grabs a frame from the camera (to a texture) and renders the screen.

        if you don't want to tie the framerate to the camera, you can check and
        see if the camera has an image ready.  note that while this works
        on most cameras, some will never return true.
        """
        if 0 and self.camera.query_image():
            self.snapshot = self.camera.get_image(self.snapshot)
        self.snapshot = self.camera.get_image(self.snapshot)
        textureData = pygame.image.tostring(self.snapshot, "RGBX", 1)
        if bool(glActiveTexture):   # make sure glActiveTexture is defined
            glActiveTexture(GL_TEXTURE0) # IMPORTANT ! sets the texture unit to 0. 
        glBindTexture(GL_TEXTURE_RECTANGLE_ARB, self.textures[0])
        glTexImage2D(GL_TEXTURE_RECTANGLE_ARB, 0, GL_RGBA, self.snapshot.get_width(), self.snapshot.get_height(), 0, GL_RGBA, GL_UNSIGNED_BYTE, textureData)
        glTexParameterf(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
        glTexParameterf(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_NEAREST)
        self.draw()
        pygame.display.flip()
    
    def main(self):
        going = True
        while going:
            events = pygame.event.get()
            for e in events:
                if e.type == QUIT:
                    going = False
                if e.type == KEYDOWN:
                    if e.key == K_ESCAPE:
                        going = False
                    elif e.key == K_RETURN:
                        effect.enabled != effect.enabled
                elif e.type == KEYDOWN:
                    if e.key == K_f:
                        pygame.display.toggle_fullscreen()

            self.get_and_flip()
            self.clock.tick(30)
            #print "FPS:", self.clock.get_fps()
    

if __name__ == '__main__':
    import optparse

    parser = optparse.OptionParser(usage="%prog", version='shadertester ' + str(__version__))
    parser.add_option("-f", "--effect", type="string", default="simplechroma", 
        help="Name of the shader effect to test.")
    parser.add_option("-d", "--device", dest="device", type="int", \
        help="Specifies V4L2 device to grab image from. Expects an integer such as 0, 1 or 2.", default=0)
    parser.add_option("-l", "--list-effects", \
        action="store_true", \
        help="Prints the list of effects and exits.") 
    (options, args) = parser.parse_args()
    camera_number = options.device
    if options.list_effects:
        print("Effects :")
        for f in ["simplechroma", "brcosa"]:
            print(" - %s" % (f))
        sys.exit(0)
    try:
        if options.effect == "simplechroma":
            from toon.effects import simplechroma
            effect = simplechroma.create_effect()
        elif options.effect == "brcosa":
            from toon.effects import brcosa
            effect = brcosa.create_effect()
        else:
            print("Effect %s is not valid." % (options.effect))
            sys.exit(1)
    except ImportError, e:
        print(e.message)
        print("path: %s" % (sys.path))
        raise
    effect.enabled = True # choose it
    pygame.init()
    pygame.camera.init()
    VideoCapturePlayer(effect, camera_number).main()
    pygame.quit()


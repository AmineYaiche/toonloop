#!/usr/bin/env python
#
# iTuner
#
# Copyright 2009 Alexandre Quessy
# <alexandre@quessy.net>
#
# iTuner is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# iTuner is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the gnu general public license
# along with iTuner.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Musical Tuner

Usage :
 - Press 'i' to print infos.
 - Press 'h' to print a help message.
"""
 
import sys
from time import strftime
import os
import shutil
import glob
import pprint

from twisted.internet import reactor

import pygame
import pygame.camera
from pygame.locals import *
from pygame import time
from OpenGL.GL import *

from rats import render
from rats.serialize import Serializable
from rats.observer import Subject

import toon
from toon.draw import draw_square
from toon import puredata

__version__ = "0.1"

class TunerError(Exception):
    """
    Any error this app might encouter
    """
    pass

class ITuner(render.Game):
    """
    Tuner for musical instruments.
    """
    def __init__(self, config):
        """
        Startup poutine.

        Reads config.
        Starts pygame.
        Creates the window. Hides the mouse.
        Start services (FUDI Pure Data bridge)
        """
        self.config = config
        self.example_i = 0
        # size of the rendering window
        self._display_size = (self.config.display_width, self.config.display_height)
        self.running = True
        self.pd = None # Pure Data
        self.paused = False
        self.clock = pygame.time.Clock()
        self.fps = 0 # for statistics
        self.renderer = None # Renderer instance that owns it.
        # the icon
        icon = pygame.image.load(os.path.join(self.config.PACKAGE_PATH, 'data', "icon.png"))
        pygame.display.set_icon(icon) # a 32 x 32 surface
        # the pygame window
        self.display = pygame.display.set_mode(self._display_size, OPENGL | DOUBLEBUF | HWSURFACE)
        pygame.display.set_caption("iTuner - Musical Tuner")
        pygame.mouse.set_visible(True)
        
        self._setup_window()
        self._clear_playback_view()
        # copy conf elements
        if self.config.verbose:
            pprint.pprint(self.config.__dict__)
        self._has_just_added_frame = False
        reactor.callLater(0, self._start_services)

    def _start_services(self):
        """
        Starts the Tuner network services.

        Called once the Twisted reactor has been started. 

        Implemented services : 
         * FUDI protocol with PureData
        """
        # FUDI
        if self.config.fudi_enabled:
            try:
                # TODO: subscription push mecanism
                app = self
                fudi_recv = self.config.fudi_receive_port
                fudi_send = self.config.fudi_send_port
                fudi_send_host = self.config.fudi_send_host

                self.pd = puredata.start(app=app, receive_port=fudi_recv, send_port=fudi_send, send_host=fudi_send_host)
            except:
                print "Error loading puredata:", sys.exc_info()
                raise

    def _clear_playback_view(self):
        pass # useless

    def print_stats(self):
        """
        Print statistics
        """
        print ">>>>>>> iTuner Statistics >>>>>>>>"
        try:
            print "FPS: %d" % (self.fps)
            self.config.print_values()

            print 'pygame.display.Info(): ', pygame.display.Info()
            print "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
        except AttributeError, e:
            print sys.exc_info()

    def print_help(self):
        """
        Prints help for live keyboard controls.
        """
        print "iTuner keyboard controls : "
        print "p = pause"
        print "i = prints informations"
        print "h = prints this help message"
        print "<Esc> = quit program\n"
        
    def fiddle(value):
        """
        Sets current pitch note.
        """
        print 'fiddle~', value

    def _setup_window(self):
        """
        OpenGL setup.
        """
        # window is 1280 x 960
        self._resize_window(self._display_size)
        glEnable(GL_BLEND)
        glShadeModel(GL_SMOOTH)
        glClearColor(0.0, 0.0, 0.0, 0.0) # black background
        glColor4f(1.0, 1.0, 1.0, 1.0) # self.config.playback_opacity) # for now we use it for all
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)

    def _resize_window(self, (width, height)):
        """
        Called when we resize the window.
        (fullscreen on/off)

        The OpenGL coordinates go from -4 to 4 horizontally
        and -3 to 3 vertically.
        (ratio is 4:3)
        """
        print "resize", width, height
        if height == 0:
            height = 1
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        glOrtho(-4.0, 4.0, -3.0, 3.0, -1.0, 1.0)
        glMatrixMode(GL_MODELVIEW)
        glLoadIdentity()

    
    def draw(self):
        """
        Renders one frame.
        Called from the event loop. (twisted)
        """
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        
        self.example_i = (self.example_i + 1) % self.config.display_width
        # white background
        glColor4f(1.0, 1.0, 1.0, 1.0)
        glPushMatrix()
        glScalef(4.0, 1.5, 1.0)
        draw_square()
        glPopMatrix()

        # red rectangle
        glColor4f(1.0, 0.0, 0.0, 1.0)
        glPushMatrix()
        factor = self.example_i / (self.config.display_width * 1.0)
        glScalef(factor * 4.0, 1.5, 1.0)
        draw_square()
        glPopMatrix()

        self.clock.tick()
        self.fps = self.clock.get_fps()
        pygame.display.flip()

    def pause(self, val=None):
        """
        Toggles on/off the pause
        """
        if val is not None:
            self.paused = val
        else:
            self.paused = not self.paused

    def process_events(self, events):
        """
        Processes pygame events.
        :param events: got them using pygame.event.get()
        """
        for e in events:
            if e.type == QUIT:
                self.running = False
            # TODO : catch window new size when resized.
            elif e.type == pygame.VIDEORESIZE:
                print "VIDEORESIZE", e
            elif e.type == KEYDOWN: 
                if e.key == K_i: # I Info
                    try:
                        self.print_stats()
                    except Exception, e:
                        print e.message
                elif e.key == K_p: # P Pause
                    self.pause()
                elif e.key == K_f: # F Fullscreen
                    pygame.display.toggle_fullscreen()
                elif e.key == K_ESCAPE: #  or e.key == K_q: # ESCAPE or Q
                    self.quit()
    def quit(self):
        """Quits the application in a short while.
        """
        reactor.callLater(0.1, self._quit)

    def _quit(self):
        self.running = False

    def cleanup(self):
        """
        Called before quitting the application.
        """
        pass
        # glDeleteTextures(3, self.textures)

    def config_set(name, value):
        """
        Changes a configuration option.
        """
        self.config.set(name, value)

class Configuration(Serializable):
    """
    Configuration options.
    
    Default values are defined here. 
    Overriden as **argd arguments to MusicalTuner(**argd)
    
    Python allows commas at the end of lists and tuples
    """
    def __init__(self, **argd): 
        # basics
        self.verbose = True
        
        # window
        self.display_width = 640
        self.display_height = 480
        self.PACKAGE_PATH = os.path.dirname(toon.__file__)
        
        # fudi puredata interface
        self.fudi_enabled = False
        self.fudi_receive_port = 15555
        self.fudi_send_port = 17777
        self.fudi_send_host = 'localhost'
        
        # overrides some attributes whose defaults and names are below.
        self.__dict__.update(**argd) 

    def print_values(self):
        for k in sorted(self.__dict__):
            v = self.__dict__[k]
            print "    -o %s %s" % (k, v)

    def set(self, name, value):
        """
        Casts to its type and sets the value.

        Intended to be used even from ASCII string values. (FUDI, etc.)

        A bool value can be set using 'True' or 1 and 'False' or 0
        """
        # try:
        kind = type(self.__dict__[name])
        if kind is bool:
            if value == 'True':
                casted_value = True
            elif value == 'False':
                casted_value = False
            else:
                casted_value = bool(int(value))
        else:
            casted_value = kind(value)
        self.__dict__[name] = casted_value
        print 'config.%s = %s(%s)' % (name, kind.__name__, self.__dict__[name])
        return kind
        # except Exception, e:
        #    print e.message



# import sys
from optparse import OptionParser
# 
# import pygame 
# from twisted.internet import reactor
# 
# from rats import render
# 
# the core: 
#from  import iTuner
#from toon.itoonloop import Configuration

if __name__ == "__main__":
    """
    Starts the application, reading the command-line arguments.
    """
    EPILOG="iTuner is a tuner for musical instruments. It supports untempered scales and notes."
    parser = OptionParser(usage="%prog", version='iTuner ' + str(__version__), \
        epilog=EPILOG)
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", \
        help="Sets the output to verbose.")
    parser.add_option("-o", "--option", action="append", nargs=2, \
        help="Sets any toonloop option by name.")
    parser.add_option("-l", "--list-options", \
        dest="list_options", action="store_true", \
        help="Prints the list of options and exit.") 
    # other args:
    parser.add_option("-f", "--fps", type="int", \
        help="Sets the rendering frame rate.", default=30)
    (options, args) = parser.parse_args()
    
    print "iTuner - " + str(__version__)
    print "Copyright 2008 Alexandre Quessy"
    print "Released under the GNU General Public License"
    print "Press h for usage and instructions"
    pygame.init()
    config = Configuration()
    kwargs = config.__dict__
    # if options.image_width:
    #     kwargs['image_width'] = options.image_width
    #     kwargs['image_height'] = options.image_width * 3 / 4
        
    # options that have default values:
    kwargs['verbose'] = options.verbose == True

    if kwargs['verbose']:
        print "Started in verbose mode."
    if options.option:
        print 'options', options.option
        for k, v in options.option:
            try:
                kind = config.set(k, v)
                print "OPTION \"%s\" : %s       %s" % (k, v, kind)
            except KeyError, e:
                raise TunerError('No such option :', e.message)
            except Exception, e:
                print sys.exc_info()
                raise TunerError('Error with option :', e.message)
    if options.list_options:
        print """Use iTuner options with -o flag :
        toonloop -o [name] [value]"""
        print "iTuner options and their current values :"
        config.print_values()
        print "\nExiting."
        sys.exit(0)
    try:
        ituner = ITuner(config)
        if options.verbose:
            ituner.print_help()
    except TunerError, e:
        print str(e.message)
        print "Exiting iTuner with error"
        sys.exit(1)
    else:
        print "Congratulations ! iTuner started gracefully."
    pygame_timer = render.Renderer(ituner, False) # not verbose !  options.verbose
    pygame_timer.desired_fps = options.fps
    try:
        reactor.run()
    except KeyboardInterrupt:
        pass
    print "Exiting iTuner"
    sys.exit(0)

